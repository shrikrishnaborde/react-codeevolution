1. Introdunction

React is JS library. Does not support routing and http request.
Created and maintained by Facebook. Component bases architecture.

2. Hello world

Use CRA for creating project
npx create-react-app hello-world

3. file structure

index.html in public folder is the html that is erved to the client
it has a root node with id "root" where index.js embed the App component

4. components

two types of components in react-app

functional components : functions that returns HTML

class components : ES6 classes that extends Component class of React, must have render method that returns HTML

5. Functonal components

function that return JSX Code, need to embed this function in other component to reflect on UI

Non ES6 syntax :

function Greet () {
  return <h1>Hello People</h1>
}

export default Greet;

and import it as below:

import Greet from './components/Greet';

function App() {
  return (
    <div className="App">
      <Greet />
    </div>
  );
}

ES6 syntax:

const Greet = () => {
  return <h1>Hello People</h1>
}

export default Greet;

6. class components

previously class components were used since functional component didn't have state 

class component have state, have render method that returns a JSX

extend react component class

import { Component } from "react";

class Welcome extends Component {
  render() {
    return <h1>Welcome to React Class Component</h1>;
  }
}

export default Welcome;

7. JSX

make react code simpler and easier to uderstand

we can wite code in react app without JSX but it incrases complexity

without JSX, react provides createElement for each tag

differnec between HTML and JSX

class in HTML -> className in JSX

smallcase for event names onclick -> camelCase in JSX onClick

8. props

input passed to functional components

const Greet = (props) => {
  return <h1>Hello {props.name}</h1>
}

export default Greet;

and while calling componets, we can pass props like

<div className="App">
      <Greet name="Bruce"/>
      <Greet name="Diana"/>
      <Greet name="Alice"/>
      <Greet name="Kane"/>
    </div>
	
ideal way to pass props 

const Greet = ({name,heroName} = {}) => {
  return <h1>Hello {name} a.k.a {heroName}</h1>
}

Childern props :

if we want to pass a HTML to our component, we can pass it using childern props

 <Greet name="Bruce" heroName="Batman">
        <p>Children props</p>
 </Greet>
 
 and use it child component as below
 
const Greet = (props) => {
  return (
    <div>
      <h1>Hello {props.name} a.k.a {props.heroName}</h1>
      {props.children}
    </div>
  )
}

we can add props in class component like below

class Welcome extends Component {
  render() {
    return (
      <div>
        <h1>Welcome {this.props.name} a.k.a {this.props.heroName}</h1>
        {this.props.children}
      </div>

    );
  }
  


}

here this.props is reserved keyword

props are immutable, meand readonly , we can't and shouldn't add an new keys to props or change 
ay of the key value
  

9. State

props are immutable and passes as input to the component

to preserve the behaviour changes on actions in the component, we store the behaviour in state

previously only class component used to have state and maintained using this.state object and setState method

class Message extends Component {

  constructor(){
    super();
    this.state = {
      message : 'Welcome Visitor'
    }
  }

  changeMessage(){  
    this.setState({
      message: 'Thank you for subscribing'
    })
  }

  render() {
    return (
      <div>
        <h1>{this.state.message}</h1>
        <button onClick={() => {this.changeMessage()}}>Subscribe</button>
      </div>

    );
  }
  
 10. setState
 
 state can be update directly only in the class constructor
 other than that only setState method should be used to update state,
 call to setState rerenders the component, hence changes are reflected in the UI
 
   incrementCount(){
    //wrong way
    // this.state.count = this.state.count + 1;
    
    this.setState({
      count: this.state.count + 1
    })
  }
  
  
  setState call is async in nature, if we want to do any action after
  the state is update, we can do it in callback function that is provided
  as secong argument to setState method
  
  incrementCount(){
    //wrong way
    // this.state.count = this.state.count + 1;
    
    this.setState({
      count: this.state.count + 1
    }, () => {
      console.log('Callback value', this.state.count);
    })

    //wrong way
    //console.log(this.state.count);
  }
  
  React clubs setState call together, so if your state is dependent on previous state
  
  we ca n do it like below
  
  wrong way:
  
  incrementCount(){
    //wrong way
    // this.state.count = this.state.count + 1;
    
    this.setState({
      count: this.state.count + 1
    }, () => {
      console.log('Callback value', this.state.count);
    })

    //wrong way
    //console.log(this.state.count);
  }

  incrementCountByFive(){ 
    this.incrementCount();
    this.incrementCount();
    this.incrementCount();
    this.incrementCount();
    this.incrementCount();
  }
  
  correct way:
  
  incrementCount(){
    //wrong way
    // this.state.count = this.state.count + 1;
    
    this.setState((prevState) => ({
      count: prevState.count + 1
    }), () => {
      console.log('Callback value', this.state.count);
    })

    //wrong way
    //console.log(this.state.count);
  }
  
  11. Destructuring props
  
  props are destrcutred for better usage
  
  const Greet = ({name,heroName, children }) => {
  return (
    <div>
      <h1>Hello {name} a.k.a {heroName}</h1>
      {children}
    </div>
  )
}

class Welcome extends Component {
  render() {
    const {name, heroName, children} = this.props;  // Destructuring props
    return (
      <div>
        <h1>Welcome {name} a.k.a {heroName}</h1>
        {children}
      </div>

    );
  }
}

12. event handling

in functional components:

const ClickButton = () => {

  const clickHandler = () => {
    console.log('Button clicked')
  }

  return (
    <button onClick={clickHandler}>Click Me</button>
  )
}

in class components:

export default class ButtonClick extends Component {

  clickHandler = () => {
    console.log('Button clicked');
  }

  render() {
    return (
      <button onClick={this.clickHandler}>Click</button>
    )
  }
}

13. Binding event handlers

this is easiest way to attach event handlers  when when we want pass params

<button onClick={() => this.clickHandler()}>Click</button>


14. passing methods as props

function ParentComponent() {

  const clickHandler = (childName) => {
    console.log(`${childName} clicked`)
  }

  return (
    <ChildComponent clickHandler={clickHandler}/>
  )
}

function ChildComponent(props) {
  return (
    <button onClick={() => props.clickHandler('Mark')}>Click</button>
  )
}


15. conditional rendering

we can show hide certain JSX code base on some conditions

Way 1: 

export class UserGreeting extends Component {
  constructor(props) {
    super(props)
  
    this.state = {
       isLoggedIn: true
    }
  }

  render() {
    if(this.state.isLoggedIn){
      return <div>Hello User</div>
    } else {
      return <div>Hello Guest</div>
    }
    
  }
}

Way 2:

render() {
    let message;

    if(this.state.isLoggedIn){
      message = <div>Hello User</div>
    } else {
      message = <div>Hello Guest</div>
    }
    
    return <div>{message}</div>
  }
  
 Way 3: 
 
 render() {
    return(
      this.state.isLoggedIn ? (
        <div>Welcome Vishwas</div>
      ) : (
        <div>Welcome Guest</div>
      )
    )
  }
  

16. List Rendering

Way 1:

  const names = ['Bruce', 'Clark', 'Diana'];
  return (
    <div>
    {
      names.map(name => <h2>{name}</h2>)
    }
    </div>
  )
}

Way 2:

function NamedList() {
  const names = ['Bruce', 'Clark', 'Diana'];
  const namedList = names.map(name => <h2>{name}</h2>)
  return (
    <div>
    {
      namedList
    }
    </div>
  )
}

when JSX is getting complex, it is advised to extract JSX in seperate component

function NamedList() {
  const heroes = [{
    name: 'Bruce',
    heroName: 'Batman'
  }, {
    name: 'Clark', 
    heroName: 'Superman'
  }, {
    name: 'Diana',
    heroName: 'Wonder Women'
  }];

  return (
    <div>
    <HeroesList heroes={heroes}/>
    </div>
  )
}

function HeroesList({heroes}) {
  const heroesList = heroes.map(hero => <h2>{hero.name} a.k.a {hero.heroName}</h2>)
    return (
      <div>
      {heroesList}
      </div>
    )
}


each item in lsist should have a unique key prop for react to identity which item in list have modified

function HeroesList({heroes}) {
  const heroesList = heroes.map(hero => <h2 key={hero.id}>{hero.name} a.k.a {hero.heroName}</h2>)
    return (
      <div>
      {heroesList}
      </div>
    )
}

note that key value should be unique, don't use index valye as key

17. Styles

there are many ways we can add styles to the component

Way 1:

importing style files

import '../styles/myStyles.css'

function StyleSheet() {
  return (
    <div className='primary'>Sharanya</div>
  )
}

if we want to render a class conditionally with other classes, we can do it like beloww

function StyleSheet(props) {
  const classes = props.primary ? 'primary': '';
  return (
    <div className={`${classes} font-xl`}>Sharanya</div>
  )
}

Way2 :

using inline styles

function InlineStyles() {
  const stylesObj = {
    fontSize: 'large',
    color: 'green'
  }
  return (
    <div style={stylesObj}>InlineStyles</div>
  )
}

Way 3 :

CSS Modules

import style from '../styles/newStyles.module.css'

function StyleSheet(props) {
  return (
    <div>
      <div className={style.success}>Success</div>
    </div>
  )
}

advntage of using styles modules is styles are scoped to components and child component


18. Controlled component

controlled component are the component where form values are saved in state of the components.

export class Form extends Component {
  constructor(props) {
    super(props)
  
    this.state = {
       firstName: '',
       comments: '',
       skills: 'react'
    }
  }

  handleUserNameChange = (event) => { 
    this.setState({
      userName: event.target.value
    })
  }

  handleCommentsChange = (event) => {
    this.setState({
      comments: event.target.value
    })
  }

  handleSkillsChange = (event) => { 
    this.setState({
      skills: event.target.value
    })
  }

  handleSubmit = (event) => {
    alert(`Hello ${this.state.userName} ${this.state.comments} ${this.state.skills}`)
    event.preventDefault()
  }

  render() {
    return (
      <form onSubmit={this.handleSubmit}>
        <input type="text" value={this.state.userName} onChange={this.handleUserNameChange}/>
        <textarea value={this.state.comments} onChange={this.handleCommentsChange}></textarea>
        <select value="this.state.skills" onChange={this.handleSkillsChange}>
          <option value="react">React</option>
          <option value="angular">Angular</option>
          <option value="vue">Vue</option>
        </select>
        <button type='submit'>Submit</button>
      </form>
    )
  }
}


19.class compmponent lifecycle

1. Mounting phase

i. constructor(props)

set the state and do any action bindings

ii. static getDerivedStateFromProps(props,state)

if component state depends on props , we use this method

return new state

iii. render

only required method

render the component and child components on DOM

child component lifecycle methods will execute next to this render method.

iv. componentDidMount

Called immediately after component and its child component have beed rendered to DOM

we can make side effects like HTTP calls, DOM update in this method since they are guarntee to exist

2. Updating phase

i. static getDerivedStateFromProps(props,state)

called every time after component re-renders

if component state depends on props , we use this method

return new state

ii. shouldComponentUpdate(nextState,nextProps)

this will determine if component should renrender to DOM 

used for performance optimization

iii. render 

render the JSX to DOM

iv. getSnapshotBeforeUpdate(prevState,prevProps)

this state called immediately before any updation commited to DOM

so if you want to save anyhing like scroll position , we can do it here

 It can return a value for React to pass as a parameter to componentDidUpdate, 
 which gets called immediately after mutations.
 
v. componentDisUpdate(prevState,prevProps, snapshot)

called after updating the changes to DOM

we can make side effects in this hook

3. Unmounting phase

i. componentWillUnmount()

called before destroying the component

we can destroy network requests, event handlers in this phase


4. Error phase

i. static getDerivedStateFromError(error)

ii. componentDisCatch(error,info)

this methods are called if there is any error in component mounting, rendering or in constructor


20. Fragments

each JSX should return a single node
adding div node will add lots of divs in DOM , sometimes adding div is not correct

so for warppping multiple node without adding anything in DOM  we use fragments

we can wrap nodes in React.Fragment or <> tag , we can also pass key prop to React.Fragment

while in in list

21. Pure Components

Pure components are class components which does shal comparison of state and props

if comparison is same same . component will not renrender even if parenet component rerenders

this is used for performance optimizations


export class PureCompo extends PureComponent {
  constructor(props) {
    super(props)
  
    console.log('PureComponent constructor')
  }
  render() {
    console.log('PureComponent render')
    return (
      <div>PureComponent</div>
    )
  }
}

export class ParentComponent extends Component {
  constructor(props) {
    super(props)
  
    console.log('ParentComponent constructor')

    this.state = {
       firstName: 'John'
    }
  }

  render() {
    console.log('ParentComponent render')

    setTimeout(() => {
      this.setState({
        firstName: 'John'
      })
    },2000)

    return (
      <div>
        <div>ParentComponent</div>
        <PureCompo name={this.state.firstName}/>
      </div>      
    
    )
  }
}

shallow comparison is when both LHS and RHS points to same memory location

a=b //equal

c = [...a] 

c===a //not equal 

22. Memo components

memo component are same as pure components but for functional components

it changes only when props are changed

import React from 'react'

function MemoComponent(props) {
  console.log('MemoComponent')

  return (
    <div>MemoComponent</div>
  )
}

export default React.memo(MemoComponent)

23 Refs

refs are refernce attached by react to DOM elemnts

we can use it for DOM manipulation

export class RefsDemo extends Component {
  constructor(props) {
    super(props)
  
    this.inputRef = React.createRef()
  }

  componentDidMount() {
    this.inputRef.current.focus();
  }

  render() {
    return (
      <input type="text" ref={this.inputRef} />
    )
  }
}

we can aslo refernce the child component using ref


export class Input extends Component {
  constructor(props) {
    super(props)
  
    this.inputRef = React.createRef()
  }

  focusInput = () => {
    this.inputRef.current.focus();
  }

  render() {
    return (
      <div>
        <input type="text" ref={this.inputRef} />
      </div>
    )
  }
}

export class FocusInput extends Component {
  constructor(props) {
    super(props)
  
    this.componentRef = React.createRef()
  }

  clickHandler = () => {
    this.componentRef.current.focusInput()
  }

  render() {
    return (
      <>
        <Input ref={this.componentRef} />
        <button onClick={this.clickHandler}>Focus</button>
      </>
    )
  }
}

we can also pass refs to child functional components using forwardRef HOC

const FRInput = React.forwardRef((props,ref) => {
  return (
    <input type="text" ref={ref} />
  )
})

export default FRInput

export class FRInputParentRef extends Component {
  constructor(props) {
    super(props)
  
    this.inputRef = React.createRef();
  }

  clickHandler = () => {
    this.inputRef.current.focus();
  }

  render() {
    return (
      <>
        <FRInput ref={this.inputRef} />
        <button onClick={this.clickHandler}>Focus</button>
      </>
    )
  }
}

export default FRInputParentRef


24. Portals

if we want to host our component in another DOM node than root node, we can make
use of portals. this is useful for hosting modal or popup or side screens


import React from 'react'
import ReactDOM from 'react-dom'  ;

function PortalsDemo() {
  return ReactDOM.createPortal(
    <h1>Portals Demo</h1>
  , document.getElementById('portal-root'))
}

export default PortalsDemo

25. Error Boundry

Error boundry is class component that has either or both od statis getDerivedStateFromError
or componentDidCatch method implemented.

basically they catch error in their child components, provide fllback UI and logs errror

getDerivedStateFromError provide fallback UI and componentDidCatch simply logs the error

function Hero({heroName}) {
  if(heroName === 'Joker') {
    throw new Error('Not a hero')
  }
  
  return (
    <div>{heroName}</div>
  )
}

export default Hero

export class ErrorBoundry extends Component {

  constructor(props) {
    super(props)
  
    this.state = {
       hasError: false
    }
  }

  static getDerivedStateFromError(error) {
    return {
      hasError: true
    }
  }
  
   componentDidCatch(error, info) {
    console.log(error)
    console.log(info)
  }

  render() {
    if(this.state.hasError) {
      return <h1>Something went wrong</h1>
    } else {
      return this.props.children
    }
  }
}

export default ErrorBoundry

function App() {
  return (
    <div className="App">
      <ErrorBoundry>
          <Hero heroName="Batman"/>
          <Hero heroName="Superman"/>
          <Hero heroName="Joker"/>
      </ErrorBoundry>
    </div>
  );
}

export default App;