1. Introdunction

React is JS library. Does not support routing and http request.
Created and maintained by Facebook. Component bases architecture.

2. Hello world

Use CRA for creating project
npx create-react-app hello-world

3. file structure

index.html in public folder is the html that is erved to the client
it has a root node with id "root" where index.js embed the App component

4. components

two types of components in react-app

functional components : functions that returns HTML

class components : ES6 classes that extends Component class of React, must have render method that returns HTML

5. Functonal components

function that return JSX Code, need to embed this function in other component to reflect on UI

Non ES6 syntax :

function Greet () {
  return <h1>Hello People</h1>
}

export default Greet;

and import it as below:

import Greet from './components/Greet';

function App() {
  return (
    <div className="App">
      <Greet />
    </div>
  );
}

ES6 syntax:

const Greet = () => {
  return <h1>Hello People</h1>
}

export default Greet;

6. class components

previously class components were used since functional component didn't have state 

class component have state, have render method that returns a JSX

extend react component class

import { Component } from "react";

class Welcome extends Component {
  render() {
    return <h1>Welcome to React Class Component</h1>;
  }
}

export default Welcome;

7. JSX

make react code simpler and easier to uderstand

we can wite code in react app without JSX but it incrases complexity

without JSX, react provides createElement for each tag

differnec between HTML and JSX

class in HTML -> className in JSX

smallcase for event names onclick -> camelCase in JSX onClick

8. props

input passed to functional components

const Greet = (props) => {
  return <h1>Hello {props.name}</h1>
}

export default Greet;

and while calling componets, we can pass props like

<div className="App">
      <Greet name="Bruce"/>
      <Greet name="Diana"/>
      <Greet name="Alice"/>
      <Greet name="Kane"/>
    </div>
	
ideal way to pass props 

const Greet = ({name,heroName} = {}) => {
  return <h1>Hello {name} a.k.a {heroName}</h1>
}

Childern props :

if we want to pass a HTML to our component, we can pass it using childern props

 <Greet name="Bruce" heroName="Batman">
        <p>Children props</p>
 </Greet>
 
 and use it child component as below
 
const Greet = (props) => {
  return (
    <div>
      <h1>Hello {props.name} a.k.a {props.heroName}</h1>
      {props.children}
    </div>
  )
}

we can add props in class component like below

class Welcome extends Component {
  render() {
    return (
      <div>
        <h1>Welcome {this.props.name} a.k.a {this.props.heroName}</h1>
        {this.props.children}
      </div>

    );
  }
  


}

here this.props is reserved keyword

props are immutable, meand readonly , we can't and shouldn't add an new keys to props or change 
ay of the key value
  

9. State

props are immutable and passes as input to the component

to preserve the behaviour changes on actions in the component, we store the behaviour in state

previously only class component used to have state and maintained using this.state object and setState method

class Message extends Component {

  constructor(){
    super();
    this.state = {
      message : 'Welcome Visitor'
    }
  }

  changeMessage(){  
    this.setState({
      message: 'Thank you for subscribing'
    })
  }

  render() {
    return (
      <div>
        <h1>{this.state.message}</h1>
        <button onClick={() => {this.changeMessage()}}>Subscribe</button>
      </div>

    );
  }