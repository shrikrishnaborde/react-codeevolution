1. Introdunction

React is JS library. Does not support routing and http request.
Created and maintained by Facebook. Component bases architecture.

2. Hello world

Use CRA for creating project
npx create-react-app hello-world

3. file structure

index.html in public folder is the html that is erved to the client
it has a root node with id "root" where index.js embed the App component

4. components

two types of components in react-app

functional components : functions that returns HTML

class components : ES6 classes that extends Component class of React, must have render method that returns HTML

5. Functonal components

function that return JSX Code, need to embed this function in other component to reflect on UI

Non ES6 syntax :

function Greet () {
  return <h1>Hello People</h1>
}

export default Greet;

and import it as below:

import Greet from './components/Greet';

function App() {
  return (
    <div className="App">
      <Greet />
    </div>
  );
}

ES6 syntax:

const Greet = () => {
  return <h1>Hello People</h1>
}

export default Greet;

6. class components

previously class components were used since functional component didn't have state 

class component have state, have render method that returns a JSX

extend react component class

import { Component } from "react";

class Welcome extends Component {
  render() {
    return <h1>Welcome to React Class Component</h1>;
  }
}

export default Welcome;

7. JSX

make react code simpler and easier to uderstand

we can wite code in react app without JSX but it incrases complexity

without JSX, react provides createElement for each tag

differnec between HTML and JSX

class in HTML -> className in JSX

smallcase for event names onclick -> camelCase in JSX onClick

8. props

input passed to functional components

const Greet = (props) => {
  return <h1>Hello {props.name}</h1>
}

export default Greet;

and while calling componets, we can pass props like

<div className="App">
      <Greet name="Bruce"/>
      <Greet name="Diana"/>
      <Greet name="Alice"/>
      <Greet name="Kane"/>
    </div>
	
ideal way to pass props 

const Greet = ({name,heroName} = {}) => {
  return <h1>Hello {name} a.k.a {heroName}</h1>
}

Childern props :

if we want to pass a HTML to our component, we can pass it using childern props

 <Greet name="Bruce" heroName="Batman">
        <p>Children props</p>
 </Greet>
 
 and use it child component as below
 
const Greet = (props) => {
  return (
    <div>
      <h1>Hello {props.name} a.k.a {props.heroName}</h1>
      {props.children}
    </div>
  )
}

we can add props in class component like below

class Welcome extends Component {
  render() {
    return (
      <div>
        <h1>Welcome {this.props.name} a.k.a {this.props.heroName}</h1>
        {this.props.children}
      </div>

    );
  }
  


}

here this.props is reserved keyword

props are immutable, meand readonly , we can't and shouldn't add an new keys to props or change 
ay of the key value
  

9. State

props are immutable and passes as input to the component

to preserve the behaviour changes on actions in the component, we store the behaviour in state

previously only class component used to have state and maintained using this.state object and setState method

class Message extends Component {

  constructor(){
    super();
    this.state = {
      message : 'Welcome Visitor'
    }
  }

  changeMessage(){  
    this.setState({
      message: 'Thank you for subscribing'
    })
  }

  render() {
    return (
      <div>
        <h1>{this.state.message}</h1>
        <button onClick={() => {this.changeMessage()}}>Subscribe</button>
      </div>

    );
  }
  
 10. setState
 
 state can be update directly only in the class constructor
 other than that only setState method should be used to update state,
 call to setState rerenders the component, hence changes are reflected in the UI
 
   incrementCount(){
    //wrong way
    // this.state.count = this.state.count + 1;
    
    this.setState({
      count: this.state.count + 1
    })
  }
  
  
  setState call is async in nature, if we want to do any action after
  the state is update, we can do it in callback function that is provided
  as secong argument to setState method
  
  incrementCount(){
    //wrong way
    // this.state.count = this.state.count + 1;
    
    this.setState({
      count: this.state.count + 1
    }, () => {
      console.log('Callback value', this.state.count);
    })

    //wrong way
    //console.log(this.state.count);
  }
  
  React clubs setState call together, so if your state is dependent on previous state
  
  we ca n do it like below
  
  wrong way:
  
  incrementCount(){
    //wrong way
    // this.state.count = this.state.count + 1;
    
    this.setState({
      count: this.state.count + 1
    }, () => {
      console.log('Callback value', this.state.count);
    })

    //wrong way
    //console.log(this.state.count);
  }

  incrementCountByFive(){ 
    this.incrementCount();
    this.incrementCount();
    this.incrementCount();
    this.incrementCount();
    this.incrementCount();
  }
  
  correct way:
  
  incrementCount(){
    //wrong way
    // this.state.count = this.state.count + 1;
    
    this.setState((prevState) => ({
      count: prevState.count + 1
    }), () => {
      console.log('Callback value', this.state.count);
    })

    //wrong way
    //console.log(this.state.count);
  }
  
  11. Destructuring props
  
  props are destrcutred for better usage
  
  const Greet = ({name,heroName, children }) => {
  return (
    <div>
      <h1>Hello {name} a.k.a {heroName}</h1>
      {children}
    </div>
  )
}

class Welcome extends Component {
  render() {
    const {name, heroName, children} = this.props;  // Destructuring props
    return (
      <div>
        <h1>Welcome {name} a.k.a {heroName}</h1>
        {children}
      </div>

    );
  }
}

12. event handling

in functional components:

const ClickButton = () => {

  const clickHandler = () => {
    console.log('Button clicked')
  }

  return (
    <button onClick={clickHandler}>Click Me</button>
  )
}

in class components:

export default class ButtonClick extends Component {

  clickHandler = () => {
    console.log('Button clicked');
  }

  render() {
    return (
      <button onClick={this.clickHandler}>Click</button>
    )
  }
}

13. Binding event handlers

this is easiest way to attach event handlers  when when we want pass params

<button onClick={() => this.clickHandler()}>Click</button>


14. passing methods as props

function ParentComponent() {

  const clickHandler = (childName) => {
    console.log(`${childName} clicked`)
  }

  return (
    <ChildComponent clickHandler={clickHandler}/>
  )
}

function ChildComponent(props) {
  return (
    <button onClick={() => props.clickHandler('Mark')}>Click</button>
  )
}


15. conditional rendering

we can show hide certain JSX code base on some conditions

Way 1: 

export class UserGreeting extends Component {
  constructor(props) {
    super(props)
  
    this.state = {
       isLoggedIn: true
    }
  }

  render() {
    if(this.state.isLoggedIn){
      return <div>Hello User</div>
    } else {
      return <div>Hello Guest</div>
    }
    
  }
}

Way 2:

render() {
    let message;

    if(this.state.isLoggedIn){
      message = <div>Hello User</div>
    } else {
      message = <div>Hello Guest</div>
    }
    
    return <div>{message}</div>
  }
  
 Way 3: 
 
 render() {
    return(
      this.state.isLoggedIn ? (
        <div>Welcome Vishwas</div>
      ) : (
        <div>Welcome Guest</div>
      )
    )
  }
  

16. List Rendering

Way 1:

  const names = ['Bruce', 'Clark', 'Diana'];
  return (
    <div>
    {
      names.map(name => <h2>{name}</h2>)
    }
    </div>
  )
}

Way 2:

function NamedList() {
  const names = ['Bruce', 'Clark', 'Diana'];
  const namedList = names.map(name => <h2>{name}</h2>)
  return (
    <div>
    {
      namedList
    }
    </div>
  )
}

when JSX is getting complex, it is advised to extract JSX in seperate component

function NamedList() {
  const heroes = [{
    name: 'Bruce',
    heroName: 'Batman'
  }, {
    name: 'Clark', 
    heroName: 'Superman'
  }, {
    name: 'Diana',
    heroName: 'Wonder Women'
  }];

  return (
    <div>
    <HeroesList heroes={heroes}/>
    </div>
  )
}

function HeroesList({heroes}) {
  const heroesList = heroes.map(hero => <h2>{hero.name} a.k.a {hero.heroName}</h2>)
    return (
      <div>
      {heroesList}
      </div>
    )
}


each item in lsist should have a unique key prop for react to identity which item in list have modified

function HeroesList({heroes}) {
  const heroesList = heroes.map(hero => <h2 key={hero.id}>{hero.name} a.k.a {hero.heroName}</h2>)
    return (
      <div>
      {heroesList}
      </div>
    )
}

note that key value should be unique, don't use index valye as key

17. Styles

there are many ways we can add styles to the component

Way 1:

importing style files

import '../styles/myStyles.css'

function StyleSheet() {
  return (
    <div className='primary'>Sharanya</div>
  )
}

if we want to render a class conditionally with other classes, we can do it like beloww

function StyleSheet(props) {
  const classes = props.primary ? 'primary': '';
  return (
    <div className={`${classes} font-xl`}>Sharanya</div>
  )
}

Way2 :

using inline styles



